#include <opencv2/opencv.hpp>
#include "Encoder.h"
#include "Decoder.h"
#include "Wavelet.h"
#include "SpaRSA.h"
#include <cmath>

int main(int argc, char** argv) {

//	cv::Mat phi = (cv::Mat_<float>(16,32) << 0.130431188271381,0.0480297564542114,0.0838247799683421,0.132558723007045,-0.170091184359339,-0.126994733292568,0.212161156954972,-0.0937502799039369,-0.159803135585111,0.135371833046636,0.0667719496089100,-0.0727670324060249,0.0925675065474767,-0.0146273612990941,-0.00811932195305464,0.0899679522174407,0.0463866724840008,0.255979392093032,0.155678679699133,0.227189984838796,-0.148868573239434,0.141409446475668,-0.0525457707767575,-0.0104631002301871,0.256780415002493,0.0408752269103512,0.156076419669438,-0.0903858313393943,0.0912110415859126,-0.195387910745400,0.0233689245346222,-0.139510845442142,-0.0770483875234575,-0.0392176531964185,-0.106483992491490,-0.147599833707611,-0.143812043249608,0.193264410479843,-0.148095381323603,-0.0626593140984876,0.148700691852003,-0.130097091723004,0.0289626160882695,-0.0304543699603264,0.0362136770489654,-0.0687205064307882,-0.0627729584259439,0.0568769523432165,0.241184279648804,0.0785781302982061,0.00853333870646238,-0.350117384985455,-0.0741740981919049,-0.0223062394314060,-0.0347774222063251,0.0679483901819449,0.0314328426749918,-0.213877483255503,0.0779163206827891,-0.0687655880826837,-0.0496623723163467,0.139362514859718,-0.00760926636888742,0.104625093337098,-0.117233282790892,0.0917451168332301,0.0405658439395062,0.0232334426246408,-0.0970740202172831,-0.00120497741667613,-0.216286939300826,0.0902266121085600,-0.212801060028908,-0.173666833205813,-0.0279079565913617,-0.00486445758973891,0.126884189600069,-0.0909734327966961,-0.163157360020316,0.117935510897810,0.230027386569914,0.172348092023142,0.122559686799178,0.0315945219791553,0.0268203568118535,0.0917797539978438,-0.0970944821701738,-0.0233607024245042,-0.0555356261101054,0.0325714064238473,0.0296695985391729,-0.00623201397521868,-0.0750122755111665,-0.0917577198633118,-0.0783510861061228,0.0453303653690252,-0.00670080550109888,-0.0381007326984712,0.0889997753401458,0.106669482747979,0.0573564796258835,0.00554250059032302,-0.121077882219660,-0.0856556054361052,-0.0960746489972602,0.0447725820173197,-0.261993952247853,-0.264984217495471,0.204396131832308,-0.00750561187795770,0.197099438820423,0.0159596885225267,-0.140996485178985,0.116132475403793,-0.0371275718123699,0.112230561644838,-0.0763349939808692,-0.191213906849518,-0.0672071708867878,0.0454022335488243,-0.129168617267303,-0.0219964490098922,-0.0838142172069430,0.121085480426075,-0.0220322933756136,0.0891714141508534,-0.0481177523682170,-0.0957730404894837,0.142829237874970,-0.230642057692063,0.0756855233571632,-0.115869824162230,-0.0827322899500066,-0.0364476491660025,-0.128112088957561,0.309035454001449,0.159069379596294,0.289777129715366,0.190133108206077,-0.185195786981378,-0.0226166696939879,0.170737440002898,0.0615685036553567,-0.0375360099924133,-0.156589637478968,-0.173643825474035,0.149248820328640,-0.0964974166235470,0.0523104174508316,-0.229779104539564,-0.125650758677782,-0.0185941959316152,-0.199236647636918,-0.0884880683080932,-0.00376190831942459,-0.185132978276534,0.0447582843900837,0.0560225144888201,-0.312537574816413,-0.242170072979204,-0.0303939068314259,0.206040208890679,0.0659563328116134,0.0209924547639282,-0.139124725537536,-0.0621051340478837,0.120022049538436,0.201714775886901,-0.0538207265543889,-0.0105331829888732,-0.195653011128374,0.187915940402786,-0.0230043392317584,-0.0167985666588933,-0.0230463055415501,-0.133304581757777,0.0413466750370896,0.0891388530715647,0.183583457946387,-0.0471576277583089,-0.141221845963230,0.0515794442285310,-0.201436312301165,-0.0442538279639627,0.276457171863171,-0.00709892358209199,-0.0954940486318636,-0.0989628382796582,0.0279877170280466,0.0291820533752298,0.372906342853081,0.0207687350255620,0.0204928356435849,-0.00169305478112960,0.0215125020721911,-0.0421590828284145,-0.0491652311563904,-0.113796108570632,-0.243917404674029,-0.00505175614429243,0.0547237500103904,-0.00798185803185300,0.0613671429388742,-0.107160227293411,-0.171227158770051,0.0760937688109185,-0.104183355153641,0.00537212436732251,-0.104878338030732,0.00562739843537523,0.00714281877271941,-0.0259335222946101,-0.0389771933489557,-0.0147232530013402,0.0610919259626172,-0.0487365272193974,0.151428046256597,-0.104628752574143,-0.163884512668388,0.172392220496536,0.00919741283321226,0.0655811505905212,-0.130242312315961,-0.00490695730562498,0.128629952469081,0.103863929349093,0.0340538277466181,-0.0719625886555223,0.0832270897592056,0.196527434360739,-0.0138490279316626,0.154871443890226,-0.109892971965460,0.0720674212401161,0.112221291519733,-0.00591751540235587,0.00730722733185798,0.0578557266936172,0.0667108937543384,0.0997088840916894,0.222920511078598,0.0622706514012456,-0.0365213710924000,-0.140407036389083,-0.168746557505535,0.145448159811794,0.0465144176338848,0.0846546551223292,0.146155311160395,-0.0364226997138729,0.0480426317644037,0.0892485233299067,0.177257920841097,0.0670290910904673,-0.0958485310710845,-0.107074604193033,-0.152954518087608,-0.00621272777764454,-0.00864271535188466,0.0549697471857770,-0.273887440458371,0.00145292209917579,-0.200330551110433,-0.113479529109960,0.00323232488208722,0.121028059850382,-0.144358618514243,0.00564659125542356,-0.122553471463120,0.0150074317944772,0.204750598821791,-0.00628127202767789,0.0255239655477795,-0.139337866203492,-0.123685887602991,0.132878933160001,0.101280766286608,-0.0659774493452677,0.0442247181679901,0.0177544421345309,0.150484772705144,-0.0892380282126318,-0.0792391649084362,0.0478344634429092,0.0814029062714375,0.0931987135926125,0.180846963609786,0.0939592937018757,-0.0677144868802579,-0.140757486487144,-0.110186741391391,-0.0239273985935562,0.127778151674419,-0.154841649109914,0.00924225110103372,0.238588265547015,-0.122749581939350,-0.0293706519704652,-0.138072194849496,0.220012077159613,-0.110385557602262,0.0560859098502550,0.0222055179271850,0.0108144498557896,0.124518131676815,0.183916171827465,-0.0445977323552075,-0.0129040912132671,-0.0835234040684490,0.0818798374168644,0.139427269908638,0.150546447389955,-0.146409719900713,0.0557174160927914,-0.0670525509174857,-0.105817287688612,0.190642631841232,-0.0156225709361090,-0.00160447686357876,0.0107437670204237,-0.0348202774680823,0.122402058665615,0.0458512108823168,-0.111659946613315,0.143184392240592,0.360705618539361,0.200292736884710,0.0168281177972648,-0.0410369816603474,-0.0664946103577509,-0.000975530898500564,-0.128564189155889,0.0214895158930416,0.212752921466061,0.307400737118115,-0.00685481157930248,-0.0631016619897443,-5.93667243514367e-05,0.0555957548773569,-0.0106953074431672,0.0188321142714023,-0.0192848913114452,-0.0707122763771496,0.140291937526523,0.0473251913466978,-0.298418332445487,-0.0103243265606127,0.00248800572340249,-0.000267609271415729,0.275886998298038,0.144518393311162,-0.0704578210050568,0.189793186097411,0.102607822801142,-0.0618959332777246,0.203964442426669,0.152212046635413,0.0892998770681924,-0.00906212612306431,0.0954223507194020,-0.111756184232973,0.0826431636400370,0.0678746040703185,-0.0581311099629323,-0.00720966302540036,-0.163981457667772,0.0322734217633843,-0.0294862486545498,-0.0149408538855964,0.0399590104677490,0.179519589702055,-0.155243875990338,0.0491576635027880,0.101297605448898,0.0674807130863075,0.0956977526701037,-0.0291380507574856,0.00361103845018769,-0.00898701101322658,0.217116490004134,-0.0189522007875596,-0.117839074049873,0.0976231817983555,-0.136338437153355,-0.0530904151246216,0.198052619920829,-0.114270427358208,-0.276053779199572,-0.106883971435890,-0.0681107763091303,0.0490380208677391,0.170177355906239,-0.0125332038087583,-0.287626208501514,0.0415643174625412,-0.0416568252500117,-0.0782028164004657,0.0903847851587253,0.00798312666413521,-0.0156205875057708,-0.121294698616304,0.255559134502544,-0.0776408135647022,-0.0881925293469732,-0.0275855187018750,-0.0604660074413808,-0.0282312875199808,-0.0921485512974881,0.0305055371445401,-0.213902180987692,-0.00230258245803565,-0.0935172104180967,0.102971270120016,0.111735812738567,0.0590287576589520,-0.0781096110109398,-0.0904545880699588,-0.0569372314077501,0.0441741744960675,0.0617548620742190,-0.166835606491121,0.0652374362041429,0.0342261819910886,-0.000275319651876960,-0.0265438514069739,0.0150927794227674,-0.0765192045418242,-0.0801631991823858,0.0157219177071153,0.128016429255931,-0.0555107504576741,0.101871668432829,0.0127485128826650,-0.104438841569931,-0.250405492390792,0.117857870684381,-0.144915250607718,-0.0202754423790821,-0.114801517296421,-0.0307473538494480,0.0954244235650158,-0.0890873334844608,-0.0226207607511347,-0.186547255265833,-0.151048708404396,-0.0739375797723035,0.174567919846214,0.0716146281324150,0.114100005747474,0.0364533108154193,-0.129613001241486,-0.0488724308298858,0.0591265899880211,-0.0763989097869016,0.0927530395298550,-0.0266241441402026,0.0521768765261748,0.00666019460348912,-0.0667911028950793,-0.00529001139156614,0.151443229206964,0.452568265848983,0.116460784713019,0.0153446286048910,-0.292536183959720,-0.147517984505200,-0.125070036729660,0.132047544535398,0.139606792816610,-0.125918475902868,-0.0488327372985795,-0.344224545177386,0.217225375424485,-0.0877075714465443,-0.0671402716914847,0.171715457032409,-0.136622493473587,-0.111247776735008,0.237682379475204,0.0242480755924503,-0.177737383729684,0.0582610657340205,-0.0391184058832515,0.133637800860983,0.0137841006248807,-0.114014929146370,-0.240858142727187,0.00718333358359474,-0.223668087099831,0.161295518476358,-0.0662041100161806,0.139836417570770,0.00788404601763604,-0.0909944231548980,-0.00105618384712998,0.151867845180377,0.0119901038770161,-0.00879871857649680,-0.197561050616809,-0.0144227378116590,0.0375714555853203,-0.189362539521214,0.304365092336753,0.0311893792400443,0.0757087299897584,0.147401741112318,-0.0630826347071073,-0.125147348099527,0.184299422331931,-0.149886643149079,0.415384781966624,0.0508544181946033);
//	cv::Mat y = (cv::Mat_<float>(16,1) << -0.253880767429799,0.246528558238081,-0.206863539121046,0.172674380398149,0.268070376249268,-0.221111983479412,0.0185376781522534,0.0478198168637035,0.117165883504788,0.275681362940990,0.293776877158946,-0.124749144180911,-0.178465358479750,-0.0477477022140014,-0.491925632727813,-0.176958329643055);
//
//	SpaRSA solver = SpaRSA(y, phi);
//
//	std::cout << "FINISHED\n\n" << solver.reconstructed();
	cv::Mat inputImage = cv::imread("/Users/sohamghosh/src/imcompress/photos/photo.jpg");
	cv::cvtColor(inputImage, inputImage, CV_RGB2GRAY, 0); // ensure only 1 channel
	clock_t startTime = clock();
	Encoder e(inputImage);
	std::cout << "Encoding image: " << double( clock() - startTime ) / (double)CLOCKS_PER_SEC << "s" << std::endl;
	e.encodeImage();
	Decoder d(inputImage.rows, inputImage.cols, e.getKeyPhi(), e.getnonkeyPhi(), e.getEncodedValues());
	startTime = clock();
	d.decodeImage();
	std::cout << "Decoding image: " << double( clock() - startTime ) / (double)CLOCKS_PER_SEC << "s" << std::endl;

	cv::imshow("Output", d.getDecodedImage());
	cv::imwrite("/Users/sohamghosh/src/imcompress/photos/output.jpg", d.getDecodedImage());
	cv::waitKey(0);
	return 0;
}
